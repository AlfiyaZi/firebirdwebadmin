$Id: doc.english.txt,v 1.1 2004/01/12 20:06:40 lbrueckner Exp $

1 - What is FirebirdWebAdmin?
2 - System requirements
3 - Installation
4 - Configuration
5 - FAQ
?6 - Acknowledgements, authors and copyrights (Lutz, I think you can write this section much better than I)
?7 - How to contribute (Lutz, could you, please, write this section too)

1 - What is FirebirdWebAdmin?

 !!! Warning !!! FirebirdWebAdmin is under development and may contain serious bugs. 
  So make sure you never use it on any important data. Use a copy of
  your database if you are working with this program.

FirebirdWebAdmin is a web frontend for the Firebird and InterBase
  database servers.

  By now it has the functionality for
  
  o creating, deleting, modifying databases
  o creating, deleting, modifying tables, generators, views, triggers, domains, indices and stored procedures
  o creating, deleting, modifying database users and roles
  o performing SQL expressions on databases and display the results and export the results to csv-files
  o import and export of data through files in the csv format
  o browsing through the contents of tables and views, watching them growing while typing in data
  o selecting data for deleting and editing while browsing tables
  o inserting, deleting, displaying the contents of blob fields
  o displaying database metadata, browsing the InterBase system tables
  o database backup and restore, database maintenance
  o customize interface appearance

  Note that some of the features (such as backup and restore, database maintenance) are only available if the database-server and the
  web-server are running on the same machine. The reason is that php
  have to call the InterBase tools (isql, gsec, gstat, gfix, gbak etc.) to
  perform certain actions.

2 - System requirements

	o webserver with support for php, say Apache
	o php version 4.02 or later with support for Interbase and pcre
	o database server Firebird 1.0 or later, Interbase 6.0 or later; some of the features (such as backup and restore, database maintenance) are only available if the database-server and the
  web-server are running on the same machine
	o web-browser with enabled coockie and javascript

For example, FirebirdWebAdmin works fine in the next particular environments:
	- Apache 1.3.28/php 4.33 with support for Interbase and pcre, Firebird 1.5 RC6 SS for Linux or InterBase 7.1 for Linux, Apache 1.3.28, Linux kernel 2.4.20, SuSE 8.2, Mozilla 1.4
	 - Apache 2.0.47 (win32)/php 4.3.2 with support for Interbase and pcre, Firebird 1.0.0 for Windows, Windows 2000 SP1, Mozilla Firebird 0.7 or Internet Explorer 5.0

3 - Installation

	First, unpack the distribution file  FirebirdWebAdmin_x.xx.tar.gz and place it's contents in your webserver's document directory, for example /htdocs/FirebirdWebAdmin. Then open the file .../FirebirdWebAdmin/inc/configuration.inc.php in any text editor and set correct values for few required configuration parameters and other parameters you wish. Now launch your favourite browser and go to FirebirdWebAdmin's url, say http://yourhostname/FirebirdWebAdmin/, since now enjoy managing your databases with FirebirdWebAdmin.

4 -Configuration

	All the configuration parameters are placed in file 'inc/configuration.inc.php'. Edit it with any text editor to change any configuration parameter described below.

* parameters signed by asterisk are critical. They must be set correctly for proper work of FirebirdWebAdmin.

!!! Warning !!! Use ONLY slashes and no back-slashes in path parameters, even on Windows. For example, define('BINPATH', 'C:/Program Files/Firebird/bin/'). If by some reasons you can not use slashes or want use back- slashes then your have to double last backslash if the path like in the example define('BINPATH', 'C:\Program Files\Firebird\bin\\'), else FirebirdWebAdmin will not work properly.

Next group of parameters is about FirebirdWebAdmin interaction with Interbase/Firebird server.

* 'BINPATH' string 
Path to Interbase/Firebird executables such as isql, gbak, gfix etc.
					example for Windows: define('BINPATH', 'C:/Program Files/Firebird/bin/'); 
					example for Linux: define('BINPATH', '/usr/local/firebird/bin/'); 

* 'SECURITY_DB' string 
Pathname of Interbase/Firebird server's security database. Don't add your hostname, it will be taken from the login-panel. 'isc4.gdb', 'admin.ib', 'security.fdb' are the default names for the different server versions.
					example for Windows: define('SECURITY_DB', 'C:/Program Files/Firebird/isc4.gdb'); 

* 'TMPPATH' string 
Pathname for temporary files folder. It must be writeable for the webserver and it must be an absolute pathname. 					example for Windows: define('TMPPATH', 'C:/Program Files/Apache Group/Apache2/tmp/');         

'DEFAULT_USER' string 
Username by default.
					example: define('DEFAULT_USER',    'SYSDBA');

'DEFAULT_DB' string 
Default database; filename only, no path here.
					example: define('DEFAULT_DB',      'radavita_db.fdb');

'DEFAULT_PATH' string 
Path to default database file.
					example: define('DEFAULT_PATH',    'D:/Andrej/mywork/radavita_db/');

'DEFAULT_HOST' string 
Default hostname.
					example: define('DEFAULT_HOST',    'localhost');

'DEFAULT_ROLE' string 
Default role.
					example: define('DEFAULT_ROLE', 'inspector');  

'DEFAULT_CACHE' integer 
Cache size by default.
					example: define('DEFAULT_CACHE',   75);

'DEFAULT_CHARSET' string 
Default charset.
					example: define('DEFAULT_CHARSET', 'WIN1251');

'DEFAULT_DIALECT' integer 
SQL-dialect version by default.
					example: define('DEFAULT_DIALECT', 3);

'DEFAULT_SERVER' string 
Interbase/Firebird server version by default. Valid options are 'FB_1.0', 'FB_1.5', IB_6.0','IB_6.5', 'IB_7.0', 'IB_7.1' and 'other'.
					example: define('DEFAULT_SERVER',  'FB_1.0');

'CONFIRM_DELETE' boolean 
This parameter define whatever to ask for confirmation when data rows or any other database objects.
					example: define('CONFIRM_DELETE', TRUE);

$ALLOWED_DIRS array of string 
If $ALLOWED_DIRS is not empty then only databases in specified directories are allowed to open.  The webserver process must have read access to this directories.
					example for Linux: $ALLOWED_DIRS = array('/var/lib/interbase/',
															'/var/lib/firebird/',
															'/usr/local/firebird/examples/',
															'/tmp/');
					example: $ALLOWED_DIRS = array(); empty array, every directory is allowed

$ALLOWED_FILES array of string 
If $ALLOWED_FILES is not empty then only specified database files may be used.  The webserver process must have read access to this files. If this parameter is set then $ALLOWED_DIRS will be ignored.
					example for Linux: $ALLOWED_FILES=array('/var/lib/firebird/ibwizard.gdb',
															'/var/lib/interbase/test.gdb');
					example: $ALLOWED_FILES=array(); empty array, no file access restrictions in this case

$DATABASE_SUFFIXES array of string 
Interbase/Firebird database file extension list. FirebirdWebAdmin will work with database file only if it's extension is one of specified in the list.
					example: $DATABASE_SUFFIXES = array('gdb', 'fdb', 'ib');

'BACKUP_DIR' string 
This parameter defines directory where FirebirdWebAdmin will store backup files.
					example for Windows: define('BACKUP_DIR', 'C:/Program Files/Firebird/backup/');

$SQL_DISABLE array of string 
SQL operators and its combinations listed in this array are forbidden for execution by FirebirdWebAdmin's panel SQL::Enter command or script.
					example: $SQL_DISABLE = array('CREATE DATABASE', 'CREATE SCHEMA','DROP'); in this example creation of databases and schemas is forbidden; specify here [ALTER|DROP] DATABASE is not necessary, because they just will not work for the panel; DROP is forbidden here also

'SYSDBA_GET_ALL' boolean 
If this parameter is set TRUE then $HIDE_PANELS è $SQL_DISABLE have no effect for user SYSDBA.
					example: define('SYSDBA_GET_ALL', TRUE);

'WATCHTABLE_METHOD' hex 
This parameter affects listing of large datasets in the Watch Table panel. The method for generating pages, which are subsets of the showed dataset is defined by this parameter. You may choose one of four available methods or let FirebirdWebAdmin choose the best one:
					- define('WT_SKIP_ROWS',        0x01); skip rows by looping using php facilities, this method is slowest, but works under all circumstances;
					- define('WT_STORED_PROCEDURE', 0x02); use a stored procedure, it's  faster, but will cause trouble if more than one user will browse tables in the same database simultaneously;
					- define('WT_FIREBIRD_SKIP',    0x04); use the Firebird 'SELECT FIRST x SKIP x' syntax, best for Firebird server;
					- define('WT_IB65_ROWS',        0x08); use the Interbase6.5 'ROWS x TO y' syntax, best for Interbase 6.5 server;
					- define('WT_BEST_GUESS',       0x10); recommended - let FirebirdWebAdmin check the login Server settings and choose the best/fastest method of four listed above
					example: define('WATCHTABLE_METHOD', WT_BEST_GUESS);

'IBWA_PREFIX' string 
This parameter defines prefix for stored procedures created by FirebirdWebAdmin itself.
					example: define('IBWA_PREFIX', 'IBWA_');

'SP_LIMIT_NAME' string 
This parameter defines prefix for stored procedure created by FirebirdWebAdmin to be used for the Watch Table panel.
					example: define('SP_LIMIT_NAME', IBWA_PREFIX.'LIMIT');

'PERSISTANT_CONNECTIONS' boolean 
If set to TRUE then persistent connection ibase_pconnect() to Interbase/Firebird server is used in of ibase_connect(). Persistent connection is faster, but will deny some actions, such as 'ALTER TABLE ADD CONSTRAINT ...' and database  maintenance.
					example: define('PERSISTANT_CONNECTIONS', FALSE);

Next parameters are responsible for FirebirdWebAdmin interface appearance.

'LANGUAGE' string 
Defines FirebirdWebAdmin interface language. Valid options are 'english', 'brazilian_portuguese', 'dutch', 'japanese', 'german' è 'russian-win1251'.
					example: define('LANGUAGE', 'russian-win1251');

$HIDE_PANELS array of string 
Panels specified here will not appear in the application. 
					example: $HIDE_PANELS = array('db_systable', 'tb_show'); Database::System Tables and Watch Table panels are hide here
					example: $HIDE_PANELS = array(); empty array, every panel is shown

'TABMENU_STYLE', 'HTML' string 
This parameter defines method for tabfolder menu visualization. It may be css-formatted html-table - value 'HTML'; may be mapped images taken from 'data/menu_[LANGUAGE]' directory - 'IMAGE';  or mapped images generated on the fly and placed to 'data/menu_[LANGUAGE]' - 'BUILD', note that in the case you need php installation with gd library with ttf and png support.
					example: define('TABMENU_STYLE', 'HTML');

'MENU_WIDTH' integer 
Width of the tabfolder menu bar in pixels, used if TABMENU_STYLE is set to IMAGE. Width less than 600 is not recommended.
					example: define('MENU_WIDTH', 900);	

* 'DATAPATH' string 
This is the place where FirebirdWebAdmin searches the graphics for the menu, icons, ttf-fonts etc.
					define('DATAPATH','./data/');

* 'TTF_FONT' string 
Full pathname of ttf-font file used for generating tabfolder menubar images. Necessary only if define('TABMENU_STYLE', 'BUILD').
					example: define('TTF_FONT', DATAPATH.'Summersby.ttf');

* 'TTF_SIZE' integer 
Ttf-font size for generating tabfolder menubar images. Values less than 8 is not recommended. Necessary only if define('TABMENU_STYLE', 'BUILD').
					example: define('TTF_SIZE', 14);

'ICON_SIZE' string 
Defines size of icons and graphics navigation elements, may be 'big' or 'small'.
					example: define('ICON_SIZE', 'small');

'COLOR_BACKGROUND' string 
Defines background colour.
					example: define('COLOR_BACKGROUND',   '#F6F7C0');

'COLOR_PANEL' string 
Tabfolder menu bar and panels colour.
					example: define('COLOR_PANEL',        '#CAEA62');

'COLOR_AREA' string 
Colour ?
					example: define('COLOR_AREA',         '#FEFFE0');

'COLOR_HEADLINE' string 
Colour ?
					example: define('COLOR_HEADLINE',     '#F0E68C');

'COLOR_MENUBORDER' string 
Colour ?
					example: define('COLOR_MENUBORDER',   '#008000');

'COLOR_LINK' string 
Colour ?
					example: define('COLOR_LINK',         '#0000CD');

'COLOR_LINKHOVER' string 
Colour ?
					example: define('COLOR_LINKHOVER',    '#1E90FF');

'COLOR_SELECTEDROW' string 
Colour ?
					example: define('COLOR_SELECTEDROW',  '#008000');

 'COLOR_SELECTEDINPUT' string 
 Colour ?
					example: define('COLOR_SELECTEDINPUT','#F2F2F2');

 'COLOR_FIRSTROW' string 
 Colour ?
					example: define('COLOR_FIRSTROW',     '#DFDFDF');

'COLOR_SECONDROW' string 
Colour ?
					example: define('COLOR_SECONDROW',    '#EFEFEF');

'BG_TRANSPARENT' boolean 
Set TRUE to use png images with a transparent background. This is not supported by NS4, but is looking much better with various colour settings.
					example: define('BG_TRANSPARENT', TRUE);

'SQL_AREA_COLS' integer 
Defines width in symbols of the textarea on the SQL::Enter command or script panel. Also used  on the triggers, the stored procedures and the views panels.
					example: define('SQL_AREA_COLS', 80);

'SQL_AREA_ROWS' integer 
Defines height in symbols of the textarea on the SQL::Enter command or script panel. Also used  on the triggers, the stored procedures and the views panels.
					example: define('SQL_AREA_ROWS', 6);

'SQL_MAXSAVE' integer 
Defines maximum number of SQL-query lines on SQL::Enter command or script panel saved in the session. If 0 then whole SQL-query will be saved. If SQL-query exceeds maximum number of lines then nothing saved.
					example: define('SQL_MAXSAVE', 100);

'SQL_HISTORY_SIZE' integer 
Number of entries in SQL-query buffer on SQL::Enter command or script panel.
					example: define('SQL_HISTORY_SIZE', 25);

'SHOW_OUTPUT_ROWS' integer 
Defines maximum number of lines to show on the SQL::Show output panel, when 'Show all' button was not pressed yet.
					example: define('SHOW_OUTPUT_ROWS', 100);

'DATA_MAXWIDTH' integer 
Defines maximum width of input-fields on Data::Enter Data panel.
					example: define('DATA_MAXWIDTH', 80);

'MAX_CSV_LINE' integer 
Maximum length for a line read from the imported csv-file.
					example: define('MAX_CSV_LINE', 50000);

'DEFAULT_ROWS' integer 
Number of data rows to show on Watch Table panel by default.
					example: define('DEFAULT_ROWS', 25);

'BLOB_WINDOW_WIDTH' and 'BLOB_WINDOW_HEIGHT' integer 
Width and height, respectively, of blob displaying windows by default.
					example: define('BLOB_WINDOW_WIDTH', 600);
							define('BLOB_WINDOW_HEIGHT', 800	);

Next few parameters define technical options of web-pages generation.

'PROTOCOL' string 
Use plain connection or secure ssl-connection, respectively, valid options are 'http' or 'https'. For 'https' you need https-enabled webserver. 
					example: define('PROTOCOL', 'http');

???? 'USE_DHTML' boolean 
					example: define('USE_DHTML', TRUE);         // set FALSE if you have troubles with the dhtml in the datatype definition form
                                   // or if you want to turn off the JavaScript remote scripting features

'CACHE_STYLESHEET' boolean 
Manages css cache, if set to FALSE the stylesheets are forced to reload with every page request.
					example: define('CACHE_STYLESHEET', TRUE);

'TRANS_SID" boolean 
Set TRUE if your php was compiled with the '--enable-trans-sid' option.
					example: define('TRANS_SID', FALSE);

'SESSION_NAME' string 
Session name to use, for cookie.
					example: define('SESSION_NAME', 'ibwa');

'META_REDIRECT' boolean 
Defines which redirection to use - server side (FALSE) or client side (TRUE).
					example: define('META_REDIRECT', FALSE);

Next group of parameters is about FirebirdWebAdmin debugging. Try them if you suggests to contribute to FirebirdWebAdmin developing.

'VERSION' string 
FirebirdWebAdmin version number, DO NOT edit this parameter.

'DEBUG' boolean 
If set TRUE then debug messages are shown on the Info panel.
					example: define('DEBUG', FALSE);

'DEBUG_HTML' boolean 
If set TRUE then will write the output_buffer to TMPPATH/{script name}.html before sending it to client.
					example: define('DEBUG_HTML', FALSE);

'DEBUG_COMMANDS' boolean 
If set TRUE then all calls of external commands are displayed on the Info panel
					example: define('DEBUG_COMMANDS', FALSE);

'DEBUG_FILES' boolean 
If set TRUE then temporary files created in TMPATH for processing by isql are not deleted after its processing by isql was finished.
					example: define('DEBUG_FILES', FALSE);

5 - Frequently Asked Questions

?6 - Acknowledgements, authors and copyrights (Lutz, I think you can write this section much better than I)

?7 - How to contribute (Lutz, could you, please, write this section too)